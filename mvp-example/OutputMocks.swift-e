///
/// @Generated by Mockolo
///



import Foundation


final class LoginViewProtocolMock: LoginViewProtocol {
    init() { }


    private(set) var showProgressCallCount = 0
    var showProgressHandler: (() -> ())?
    func showProgress()  {
        showProgressCallCount += 1
        if let showProgressHandler = showProgressHandler {
            showProgressHandler()
        }
        
    }

    private(set) var hideProgressCallCount = 0
    var hideProgressHandler: (() -> ())?
    func hideProgress()  {
        hideProgressCallCount += 1
        if let hideProgressHandler = hideProgressHandler {
            hideProgressHandler()
        }
        
    }

    private(set) var showErrorCallCount = 0
    var showErrorHandler: ((String) -> ())?
    func showError(message: String)  {
        showErrorCallCount += 1
        if let showErrorHandler = showErrorHandler {
            showErrorHandler(message)
        }
        
    }

    private(set) var navigateToDashboardCallCount = 0
    var navigateToDashboardHandler: (() -> ())?
    func navigateToDashboard()  {
        navigateToDashboardCallCount += 1
        if let navigateToDashboardHandler = navigateToDashboardHandler {
            navigateToDashboardHandler()
        }
        
    }
}

final class LoginApiProtocolMock: LoginApiProtocol {
    init() { }


    private(set) var loginCallCount = 0
    var loginHandler: ((LoginApiRequest) async throws -> (LoginApiResponse))?
    func login(params: LoginApiRequest) async throws -> LoginApiResponse {
        loginCallCount += 1
        if let loginHandler = loginHandler {
            return try await loginHandler(params)
        }
        fatalError("loginHandler returns can't have a default value thus its handler must be set")
    }
}

final class LoginUseCaseProtocolMock: LoginUseCaseProtocol {
    init() { }


    private(set) var invokeCallCount = 0
    var invokeHandler: ((String, String) async throws -> ())?
    func invoke(userName: String, password: String) async throws  {
        invokeCallCount += 1
        if let invokeHandler = invokeHandler {
            try await invokeHandler(userName, password)
        }
        
    }
}

final class UserRepositoryProtocolMock: UserRepositoryProtocol {
    init() { }


    private(set) var authenticateCallCount = 0
    var authenticateHandler: ((String, String) async throws -> ())?
    func authenticate(userName: String, password: String) async throws  {
        authenticateCallCount += 1
        if let authenticateHandler = authenticateHandler {
            try await authenticateHandler(userName, password)
        }
        
    }

    private(set) var fetchSignedInUserCallCount = 0
    var fetchSignedInUserHandler: (() async throws -> (User?))?
    func fetchSignedInUser() async throws -> User? {
        fetchSignedInUserCallCount += 1
        if let fetchSignedInUserHandler = fetchSignedInUserHandler {
            return try await fetchSignedInUserHandler()
        }
        return nil
    }
}

